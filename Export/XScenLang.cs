using Rosetta.Class;
using System;
using System.Text;
using TrickyUnits;

namespace Rosetta.Export {
	internal class XScenLang:XBase {
		internal override void Export(ProjectData D, string language) {
			var Head = $"[rem]\nFile Generated By Rosetta\n(c) Copyright {DateTime.Now.Year} Jeroen P. Broks\nThese files and their content are property of Jeroen P. Broks and may NOT be removed without prior WRITTEN permission by the owner\n\n";
			var Entries = D.Scenario.AllEntries;
			foreach (var E in Entries) {
				var Out = new StringBuilder(Head);
				var Entry = D.Scenario[E];
				var Tags = Entry.LTags;
				Out.Append("[tags]\n");
				foreach (var T in Tags) Out.Append($"{T}\n");
				Out.Append("\n\n\n[scenario]\n\n");
				foreach (var T in Tags) {
					Out.Append($"-- Tag: {T}\n");
					var Tag = D.Scenario[E, T];
					for (var pn = 0; pn < Tag.PageCount; pn++) {
						var Page = D.Scenario[E, T, pn];
						var LPage = D.Scenario[E, T, pn, language];
						Out.Append($"@{T}\n");
						Out.Append($"!{Page.PicDir}\n");
						Out.Append($"*{LPage.Header}\n");
						Out.Append($":{Page.PicSpecific}\n");
						Out.Append($"%{Page.AltFont}\n");
						Out.Append($"${Page.Audio}\n");
						var C = LPage.LContent;
						foreach (var CL in C) Out.Append($"#{CL}\n");
						Out.Append($"\n");
					}
					Out.Append("\n");
				}
				QuickStream.SaveString($"{D.ExportDir}/{language}/{E}", Out, true);
			}
		}

		internal XScenLang() => Reg("ScenLang", this);
	}
}
